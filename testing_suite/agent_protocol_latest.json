{
	"info": {
		"_postman_id": "a765b01b-37a4-4b35-b824-b24e5b73b913",
		"name": "Agent Protocol - REST v2",
		"description": "Changes to the v2 testing suite are as follows:\n\n- Added Info Endpoint\n    \n- Added Config Options Schema for Additional Input\n    \n- Added Additional Input to Artifacts",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "22489400"
	},
	"item": [
		{
			"name": "Basic User Experience",
			"item": [
				{
					"name": "Cleanup Previous Run Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// See https://blog.postman.com/2019/05/28/pro-tip-dynamically-unset-postman-environment-variables/\r",
									"// for more details on what we're doing here. \r",
									"\r",
									"cleanupCollectionVariables();\r",
									"\r",
									"function cleanupCollectionVariables() {\r",
									"    const clean = _.keys(pm.collectionVariables.toObject());\r",
									"\r",
									"    _.each(clean, (arrItem) => {\r",
									"        pm.collectionVariables.unset(arrItem);\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "https://postman-echo.com/delay/0"
					},
					"response": []
				},
				{
					"name": "Get all the tasks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "mock-match",
								"value": "19",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url}}/ap/v2/agent/tasks"
					},
					"response": [
						{
							"name": "mock response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "mock-match",
										"value": "19",
										"type": "text"
									}
								],
								"url": "{{url}}/ap/v2/agent/tasks"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Thu, 17 Aug 2023 18:03:12 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								},
								{
									"key": "Content-Length",
									"value": "150"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "x-srv-trace",
									"value": "v=1;t=1c95cd08c248d38f"
								},
								{
									"key": "x-srv-span",
									"value": "v=1;s=2527ca982b2b7c75"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "120"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "117"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1692295416"
								},
								{
									"key": "ETag",
									"value": "W/\"96-S/5iQ2y1qqIInh5BwoPc+chvDJU\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"task_id\": \"fde559f8-3ab8-11ee-be56-0242ac120002\",\n        \"step_id\": \"1a379290-3abc-11ee-be56-0242ac120002\",\n        \"status\": \"completed\",\n        \"output\": \"I am going to use the write_to_file method to write the word 'Washington' to a .txt file\",\n        \"artifacts\": [],\n        \"is_last\": false\n    }\n]"
						}
					]
				},
				{
					"name": "Create a new task",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.globals.set(\"task_id\", jsonData.task_id);",
									"",
									"pm.globals.set(",
									"    \"step_body\",",
									"    JSON.stringify(",
									"        {",
									"            \"input\": JSON.parse(pm.request.body.raw).input",
									"        } ",
									"    )",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "mock-match",
								"value": "34",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"input\": \"Write the word 'Washington' to a .txt file\",\n    \"additional_input\": {\"test_run_id\": \"123\"}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url}}/ap/v2/agent/tasks"
					},
					"response": [
						{
							"name": "mock response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "mock-match",
										"value": "34"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": \"Write the word 'Washington' to a .txt file\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/ap/v2/agent/tasks"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Sun, 13 Aug 2023 23:23:05 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "28"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "x-srv-trace",
									"value": "v=1;t=daef761e243c402b"
								},
								{
									"key": "x-srv-span",
									"value": "v=1;s=2c0bd88502372360"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "120"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "115"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1691968334"
								},
								{
									"key": "ETag",
									"value": "W/\"96-S/5iQ2y1qqIInh5BwoPc+chvDJU\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								}
							],
							"cookie": [],
							"body": "{\n    \"input\": \"Write the word 'Washington' to a .txt file\",\n    \"additional_input\": {},\n    \"task_id\": \"fde559f8-3ab8-11ee-be56-0242ac120002\",\n    \"artifacts\": []\n}"
						}
					]
				},
				{
					"name": "Execute a step",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.request.url.path[0] == \"agent\" && pm.response.headers.has(\"Content-Type\",`application/json`)) {",
									"    var artifacts = pm.response.json().artifacts;",
									"",
									"    if (artifacts && artifacts.length > 0) {",
									"        pm.globals.set(\"artifactId\", artifacts[0].artifact_id);",
									"    }",
									"",
									"    var artifacts = pm.response.json().artifacts;",
									"    var existingArtifactId = pm.globals.get(\"artifactId\");",
									"/*  Commented out artifact checking code and max step code because the SDK doesn't implement simple agents",
									"    if (artifacts && artifacts.length > 0) {",
									"        if (artifacts.length > 1) {",
									"            pm.test(\"This task should only create 1 artifact\", function () {",
									"                pm.expect.fail(\"More than one artifact was created.\");",
									"            });",
									"        } else {",
									"            pm.globals.set(\"artifactId\", artifacts[0].artifact_id);",
									"        }",
									"    }*/",
									"    stepNumber = pm.collectionVariables.get(\"step-number\") ?? 1",
									"    const maxSteps = 10",
									"    if(!pm.response.json().is_last) {",
									"        /*if (stepNumber > maxSteps) {",
									"            console.log(`Max steps reached (${maxSteps})`);",
									"            pm.test(`This task should be completed after ${maxSteps} steps`, function () {",
									"                pm.expect.fail(`is_last should be true before max steps reached (${maxSteps})`);",
									"            });",
									"        } else {",
									"            console.log(`Steps reached (${stepNumber})`);",
									"",
									"            pm.collectionVariables.set('step-number', stepNumber + 1);",
									"            pm.globals.set(",
									"                \"step_body\",",
									"                JSON.stringify(",
									"                    {",
									"                        \"input\": \"y\"",
									"                    }",
									"                )",
									"            );",
									"",
									"            pm.collectionVariables.set('previous-step', pm.response.json().step_id)",
									"            postman.setNextRequest('Execute the steps until completion');",
									"        }*/",
									"        ",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"stepNumber = pm.collectionVariables.get(\"step-number\") ?? 1",
									"console.log(\"Step number:\" + stepNumber)",
									"console.log(\"Task Input:\" + pm.globals.get(\"taskInput\"))",
									"if (stepNumber) {",
									"    pm.request.headers.upsert({ key: 'mock-match', value: stepNumber.toString() });",
									"    console.log(pm.request)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{step_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url}}/ap/v2/agent/tasks/{{task_id}}/steps"
					},
					"response": [
						{
							"name": "mock response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "mock-match",
										"value": "1",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": \"Write the word 'Washington' to a .txt file\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/ap/v2/agent/tasks/{{task_id}}/steps"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Mon, 14 Aug 2023 16:28:55 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "275"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "x-srv-trace",
									"value": "v=1;t=daef761e243c402b"
								},
								{
									"key": "x-srv-span",
									"value": "v=1;s=2c0bd88502372360"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "120"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "115"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1691968334"
								},
								{
									"key": "ETag",
									"value": "W/\"96-S/5iQ2y1qqIInh5BwoPc+chvDJU\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								}
							],
							"cookie": [],
							"body": "{\n    \"task_id\": \"fde559f8-3ab8-11ee-be56-0242ac120002\",\n    \"step_id\": \"1a379290-3abc-11ee-be56-0242ac120002\",\n    \"input\": \"y\",\n    \"status\": \"completed\",\n    \"output\": \"I am going to use the write_to_file method to write the word 'Washington' to a .txt file\",\n    \"artifacts\": [\n    ],\n    \"is_last\": false\n}"
						},
						{
							"name": "mock response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "mock-match",
										"value": "2",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": \"y\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/ap/v2/agent/tasks/{{task_id}}/steps"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Mon, 14 Aug 2023 16:28:55 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "275"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "x-srv-trace",
									"value": "v=1;t=daef761e243c402b"
								},
								{
									"key": "x-srv-span",
									"value": "v=1;s=2c0bd88502372360"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "120"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "115"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1691968334"
								},
								{
									"key": "ETag",
									"value": "W/\"96-S/5iQ2y1qqIInh5BwoPc+chvDJU\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								}
							],
							"cookie": [],
							"body": "{\n    \"task_id\": \"fde559f8-3ab8-11ee-be56-0242ac120002\",\n    \"step_id\": \"2a479290-3abc-11ee-be56-0242ac1209c1\",\n    \"input\": \"y\",\n    \"status\": \"completed\",\n    \"output\": \"I used the write_to_file method to write the file test_output.txt\",\n    \"artifacts\": [\n                {\n          \"artifact_id\": \"2ba79290-3abc-11ee-be56-0242ac1209d3\",\n          \"agent_created\": true,\n          \"uri\": \"file://test_output.txt\"\n        }\n    ],\n    \"is_last\": true\n}"
						}
					]
				},
				{
					"name": "Execute step after completion",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "mock-match",
								"value": "34",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"input\": \"y\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url}}/ap/v2/agent/tasks/{{task_id}}/steps"
					},
					"response": [
						{
							"name": "mock response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "mock-match",
										"value": "34",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": \"y\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/ap/v2/agent/tasks/{{task_id}}/steps"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Mon, 14 Aug 2023 16:28:55 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "275"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "x-srv-trace",
									"value": "v=1;t=daef761e243c402b"
								},
								{
									"key": "x-srv-span",
									"value": "v=1;s=2c0bd88502372360"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "120"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "115"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1691968334"
								},
								{
									"key": "ETag",
									"value": "W/\"96-S/5iQ2y1qqIInh5BwoPc+chvDJU\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								}
							],
							"cookie": [],
							"body": "{\n    \"task_id\": \"fde559f8-3ab8-11ee-be56-0242ac120002\",\n    \"step_id\": \"2d479290-3abc-11ee-be56-0242ac120b95\",\n    \"status\": \"completed\",\n    \"output\": \"I am already done with my work.\",\n    \"artifacts\": [\n    ],\n    \"is_last\": true\n}"
						}
					]
				}
			],
			"description": "We ask the agent to write a file in his workspace.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Info",
			"item": [
				{
					"name": "Get the agent info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    var contentType = pm.response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.include('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has all required properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData).to.have.property('protocol');\r",
									"    pm.expect(jsonData).to.have.property('version');\r",
									"    pm.expect(jsonData).to.have.property('config_options');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{url}}/ap/v2/agent/info"
					},
					"response": [
						{
							"name": "mock response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/ap/v2/agent/info"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Sun, 13 Aug 2023 23:23:05 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "28"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "x-srv-trace",
									"value": "v=1;t=daef761e243c402b"
								},
								{
									"key": "x-srv-span",
									"value": "v=1;s=2c0bd88502372360"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "120"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "115"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1691968334"
								},
								{
									"key": "ETag",
									"value": "W/\"96-S/5iQ2y1qqIInh5BwoPc+chvDJU\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								}
							],
							"cookie": [],
							"body": "{\n    \"name\": \"My Favorite Agent\",\n    \"protocol\": 2,\n    \"version\": \"0.0.1\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "Tasks",
			"item": [
				{
					"name": "Create a new task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.globals.set(\"taskId\", jsonData.task_id);",
									"pm.globals.set(\"taskInput\", JSON.parse(pm.request.body.raw).input);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "mock-match",
								"value": "34"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"input\": \"Write the word 'Washington' to a .txt file\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url}}/ap/v2/agent/tasks"
					},
					"response": []
				},
				{
					"name": "Get the task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    var contentType = pm.response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.include('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has all required properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('task_id');\r",
									"    pm.expect(jsonData).to.have.property('input');\r",
									"    pm.expect(jsonData).to.have.property('additional_input');\r",
									"    pm.expect(jsonData).to.have.property('artifacts');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"input\": \"Write the word 'Washington' to a .txt file\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url}}/ap/v2/agent/tasks/{{task_id}}"
					},
					"response": [
						{
							"name": "mock response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/ap/v2/agent/tasks/{{taskId}}"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Sun, 13 Aug 2023 23:23:05 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "28"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "x-srv-trace",
									"value": "v=1;t=daef761e243c402b"
								},
								{
									"key": "x-srv-span",
									"value": "v=1;s=2c0bd88502372360"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "120"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "115"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1691968334"
								},
								{
									"key": "ETag",
									"value": "W/\"96-S/5iQ2y1qqIInh5BwoPc+chvDJU\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								}
							],
							"cookie": [],
							"body": "{\n    \"input\": \"Write the word 'Washington' to a .txt file\",\n    \"additional_input\": null,\n    \"task_id\": \"121\",\n    \"artifacts\": []\n}"
						}
					]
				},
				{
					"name": "Get all the tasks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    var contentType = pm.response.headers.get('Content-Type');",
									"    pm.expect(contentType).to.include('application/json');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"input\": \"Write the word 'Washington' to a .txt file\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url}}/ap/v2/agent/tasks"
					},
					"response": []
				},
				{
					"name": "Create a second task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.globals.set(\"lastTaskId\", jsonData.task_id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "mock-match",
								"value": "34"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"input\": \"Write the word 'Washington' to a .txt file\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url}}/ap/v2/agent/tasks"
					},
					"response": []
				},
				{
					"name": "Get all the tasks with Pagination",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    var contentType = pm.response.headers.get('Content-Type');",
									"    pm.expect(contentType).to.include('application/json');",
									"});",
									"",
									"pm.test(\"Pagination is set\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination).to.be.an('object');",
									"});",
									"",
									"pm.test(\"Page size is 1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.page_size).to.eql(1);",
									"});",
									"",
									"pm.test(\"Items is an array with one item\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.tasks).to.be.an('array').that.has.lengthOf(1);",
									"});",
									"",
									"",
									"pm.test(\"Response length respects page_size\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.tasks.length).to.be.at.most(1);",
									"});",
									"",
									"if (jsonData.items && jsonData.items.length > 0) {",
									"    if (pm.variables.has(\"lastTaskId\") && pm.variables.get(\"page\") > 1) {",
									"        pm.test(\"First task of page \" + pm.variables.get(\"page\") + \" is not the last task of page \" + (pm.variables.get(\"page\") - 1), function() {",
									"            var jsonData = pm.response.json();",
									"            pm.expect(jsonData.items[0].task_id).to.not.equal(pm.variables.get(\"lastTaskId\"));",
									"        });",
									"    }",
									"    if (jsonData.items.length > 0) {",
									"        pm.variables.set(\"lastTaskId\", jsonData.items[jsonData.items.length - 1].task_id);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"input\": \"Write the word 'Washington' to a .txt file\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/ap/v2/agent/tasks?page_size=1&current_page=1",
							"host": [
								"{{url}}"
							],
							"path": [
								"ap",
								"v2",
								"agent",
								"tasks"
							],
							"query": [
								{
									"key": "page_size",
									"value": "1"
								},
								{
									"key": "current_page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Create tasks and consumes them.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Artifacts",
			"item": [
				{
					"name": "Create a new task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.globals.set(\"task_id\", jsonData.task_id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"input\": \"Write the word 'Washington' to a .txt file\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url}}/ap/v2/agent/tasks"
					},
					"response": []
				},
				{
					"name": "Upload Artifact",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.globals.set(\"artifact_id\", jsonData.artifact_id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "test_output.txt"
								}
							]
						},
						"url": "{{url}}/ap/v2/agent/tasks/{{task_id}}/artifacts"
					},
					"response": []
				},
				{
					"name": "Download Artifact",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "mock-match",
								"value": "11",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url}}/ap/v2/agent/tasks/{{task_id}}/artifacts/{{artifact_id}}"
					},
					"response": [
						{
							"name": "mock response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "mock-match",
										"value": "11",
										"type": "text"
									}
								],
								"url": "{{url}}/ap/v2/agent/tasks/{{taskId}}/artifacts/{{artifactId}}"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Date",
									"value": "Mon, 14 Aug 2023 16:28:55 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "275"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "x-srv-trace",
									"value": "v=1;t=daef761e243c402b"
								},
								{
									"key": "x-srv-span",
									"value": "v=1;s=2c0bd88502372360"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "120"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "115"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1691968334"
								},
								{
									"key": "ETag",
									"value": "W/\"96-S/5iQ2y1qqIInh5BwoPc+chvDJU\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								}
							],
							"cookie": [],
							"body": "Washington"
						}
					]
				}
			],
			"description": "Create Artifacts and consumes them.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}