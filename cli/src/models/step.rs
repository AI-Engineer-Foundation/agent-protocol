/*
 * Agent Protocol
 *
 * Specification of the API protocol for communication with an agent.
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Step {
    /// Input prompt for the step.
    #[serde(rename = "input", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub input: Option<Option<String>>,
    /// Input parameters for the task step. Any value is allowed.
    #[serde(rename = "additional_input", skip_serializing_if = "Option::is_none")]
    pub additional_input: Option<serde_json::Value>,
    /// The ID of the task this step belongs to.
    #[serde(rename = "task_id")]
    pub task_id: String,
    /// The ID of the task step.
    #[serde(rename = "step_id")]
    pub step_id: String,
    /// The name of the task step.
    #[serde(rename = "name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub name: Option<Option<String>>,
    /// The status of the task step.
    #[serde(rename = "status")]
    pub status: Status,
    /// Output of the task step.
    #[serde(rename = "output", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub output: Option<Option<String>>,
    /// Output that the task step has produced. Any value is allowed.
    #[serde(rename = "additional_output", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub additional_output: Option<Option<serde_json::Value>>,
    /// A list of artifacts that the step has produced.
    #[serde(rename = "artifacts")]
    pub artifacts: Vec<crate::models::Artifact>,
    /// Whether this is the last step in the task.
    #[serde(rename = "is_last")]
    pub is_last: bool,
}

impl Step {
    pub fn new(task_id: String, step_id: String, status: Status, artifacts: Vec<crate::models::Artifact>, is_last: bool) -> Step {
        Step {
            input: None,
            additional_input: None,
            task_id,
            step_id,
            name: None,
            status,
            output: None,
            additional_output: None,
            artifacts,
            is_last,
        }
    }
}

/// The status of the task step.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "created")]
    Created,
    #[serde(rename = "running")]
    Running,
    #[serde(rename = "completed")]
    Completed,
}

impl Default for Status {
    fn default() -> Status {
        Self::Created
    }
}

