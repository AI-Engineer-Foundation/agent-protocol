/*
 * Agent Protocol
 *
 * Specification of the API protocol for communication with an agent.
 *
 * The version of the OpenAPI document: v1
 *
 * Generated by: https://openapi-generator.tech
 */

use reqwest;

use super::{configuration, Error};
use crate::apis::ResponseContent;

/// struct for typed errors of method [`create_agent_task`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateAgentTaskError {
	Status422(serde_json::Value),
	DefaultResponse(),
	UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`download_agent_task_artifact`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DownloadAgentTaskArtifactError {
	Status404(crate::models::GetAgentTask404Response),
	DefaultResponse(),
	UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`execute_agent_task_step`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExecuteAgentTaskStepError {
	Status404(crate::models::GetAgentTask404Response),
	Status422(serde_json::Value),
	DefaultResponse(),
	UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_agent_task`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAgentTaskError {
	Status404(crate::models::GetAgentTask404Response),
	DefaultResponse(),
	UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_agent_task_step`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAgentTaskStepError {
	Status404(crate::models::GetAgentTask404Response),
	DefaultResponse(),
	UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_agent_task_artifacts`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListAgentTaskArtifactsError {
	Status404(crate::models::GetAgentTask404Response),
	DefaultResponse(),
	UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_agent_task_steps`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListAgentTaskStepsError {
	Status404(crate::models::GetAgentTask404Response),
	DefaultResponse(),
	UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_agent_tasks`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListAgentTasksError {
	DefaultResponse(),
	UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`upload_agent_task_artifacts`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UploadAgentTaskArtifactsError {
	Status404(crate::models::GetAgentTask404Response),
	DefaultResponse(),
	UnknownValue(serde_json::Value),
}

pub async fn create_agent_task(
	configuration: &configuration::Configuration,
	task_request_body: Option<crate::models::TaskRequestBody>,
) -> Result<crate::models::Task, Error<CreateAgentTaskError>> {
	let local_var_configuration = configuration;

	let local_var_client = &local_var_configuration.client;

	let local_var_uri_str = format!("{}/ap/v1/agent/tasks", local_var_configuration.base_path);
	let mut local_var_req_builder =
		local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

	if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
		local_var_req_builder =
			local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
	}
	local_var_req_builder = local_var_req_builder.json(&task_request_body);

	let local_var_req = local_var_req_builder.build()?;
	let local_var_resp = local_var_client.execute(local_var_req).await?;

	let local_var_status = local_var_resp.status();
	let local_var_content = local_var_resp.text().await?;

	if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
		serde_json::from_str(&local_var_content).map_err(Error::from)
	} else {
		let local_var_entity: Option<CreateAgentTaskError> =
			serde_json::from_str(&local_var_content).ok();
		let local_var_error = ResponseContent {
			status: local_var_status,
			content: local_var_content,
			entity: local_var_entity,
		};
		Err(Error::ResponseError(local_var_error))
	}
}

pub async fn download_agent_task_artifact(
	configuration: &configuration::Configuration,
	task_id: &str,
	artifact_id: &str,
) -> Result<std::path::PathBuf, Error<DownloadAgentTaskArtifactError>> {
	let local_var_configuration = configuration;

	let local_var_client = &local_var_configuration.client;

	let local_var_uri_str = format!(
		"{}/ap/v1/agent/tasks/{task_id}/artifacts/{artifact_id}",
		local_var_configuration.base_path,
		task_id = crate::apis::urlencode(task_id),
		artifact_id = crate::apis::urlencode(artifact_id)
	);
	let mut local_var_req_builder =
		local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

	if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
		local_var_req_builder =
			local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
	}

	let local_var_req = local_var_req_builder.build()?;
	let local_var_resp = local_var_client.execute(local_var_req).await?;

	let local_var_status = local_var_resp.status();
	let local_var_content = local_var_resp.text().await?;

	if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
		serde_json::from_str(&local_var_content).map_err(Error::from)
	} else {
		let local_var_entity: Option<DownloadAgentTaskArtifactError> =
			serde_json::from_str(&local_var_content).ok();
		let local_var_error = ResponseContent {
			status: local_var_status,
			content: local_var_content,
			entity: local_var_entity,
		};
		Err(Error::ResponseError(local_var_error))
	}
}

pub async fn execute_agent_task_step(
	configuration: &configuration::Configuration,
	task_id: &str,
	step_request_body: Option<crate::models::StepRequestBody>,
) -> Result<crate::models::Step, Error<ExecuteAgentTaskStepError>> {
	let local_var_configuration = configuration;

	let local_var_client = &local_var_configuration.client;

	let local_var_uri_str = format!(
		"{}/ap/v1/agent/tasks/{task_id}/steps",
		local_var_configuration.base_path,
		task_id = crate::apis::urlencode(task_id)
	);
	let mut local_var_req_builder =
		local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

	if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
		local_var_req_builder =
			local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
	}
	local_var_req_builder = local_var_req_builder.json(&step_request_body);

	let local_var_req = local_var_req_builder.build()?;
	let local_var_resp = local_var_client.execute(local_var_req).await?;

	let local_var_status = local_var_resp.status();
	let local_var_content = local_var_resp.text().await?;

	if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
		serde_json::from_str(&local_var_content).map_err(Error::from)
	} else {
		let local_var_entity: Option<ExecuteAgentTaskStepError> =
			serde_json::from_str(&local_var_content).ok();
		let local_var_error = ResponseContent {
			status: local_var_status,
			content: local_var_content,
			entity: local_var_entity,
		};
		Err(Error::ResponseError(local_var_error))
	}
}

pub async fn get_agent_task(
	configuration: &configuration::Configuration,
	task_id: &str,
) -> Result<crate::models::Task, Error<GetAgentTaskError>> {
	let local_var_configuration = configuration;

	let local_var_client = &local_var_configuration.client;

	let local_var_uri_str = format!(
		"{}/ap/v1/agent/tasks/{task_id}",
		local_var_configuration.base_path,
		task_id = crate::apis::urlencode(task_id)
	);
	let mut local_var_req_builder =
		local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

	if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
		local_var_req_builder =
			local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
	}

	let local_var_req = local_var_req_builder.build()?;
	let local_var_resp = local_var_client.execute(local_var_req).await?;

	let local_var_status = local_var_resp.status();
	let local_var_content = local_var_resp.text().await?;

	if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
		serde_json::from_str(&local_var_content).map_err(Error::from)
	} else {
		let local_var_entity: Option<GetAgentTaskError> =
			serde_json::from_str(&local_var_content).ok();
		let local_var_error = ResponseContent {
			status: local_var_status,
			content: local_var_content,
			entity: local_var_entity,
		};
		Err(Error::ResponseError(local_var_error))
	}
}

pub async fn get_agent_task_step(
	configuration: &configuration::Configuration,
	task_id: &str,
	step_id: &str,
) -> Result<crate::models::Step, Error<GetAgentTaskStepError>> {
	let local_var_configuration = configuration;

	let local_var_client = &local_var_configuration.client;

	let local_var_uri_str = format!(
		"{}/ap/v1/agent/tasks/{task_id}/steps/{step_id}",
		local_var_configuration.base_path,
		task_id = crate::apis::urlencode(task_id),
		step_id = crate::apis::urlencode(step_id)
	);
	let mut local_var_req_builder =
		local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

	if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
		local_var_req_builder =
			local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
	}

	let local_var_req = local_var_req_builder.build()?;
	let local_var_resp = local_var_client.execute(local_var_req).await?;

	let local_var_status = local_var_resp.status();
	let local_var_content = local_var_resp.text().await?;

	if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
		serde_json::from_str(&local_var_content).map_err(Error::from)
	} else {
		let local_var_entity: Option<GetAgentTaskStepError> =
			serde_json::from_str(&local_var_content).ok();
		let local_var_error = ResponseContent {
			status: local_var_status,
			content: local_var_content,
			entity: local_var_entity,
		};
		Err(Error::ResponseError(local_var_error))
	}
}

pub async fn list_agent_task_artifacts(
	configuration: &configuration::Configuration,
	task_id: &str,
	current_page: Option<i32>,
	page_size: Option<i32>,
) -> Result<crate::models::TaskArtifactsListResponse, Error<ListAgentTaskArtifactsError>> {
	let local_var_configuration = configuration;

	let local_var_client = &local_var_configuration.client;

	let local_var_uri_str = format!(
		"{}/ap/v1/agent/tasks/{task_id}/artifacts",
		local_var_configuration.base_path,
		task_id = crate::apis::urlencode(task_id)
	);
	let mut local_var_req_builder =
		local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

	if let Some(ref local_var_str) = current_page {
		local_var_req_builder =
			local_var_req_builder.query(&[("current_page", &local_var_str.to_string())]);
	}
	if let Some(ref local_var_str) = page_size {
		local_var_req_builder =
			local_var_req_builder.query(&[("page_size", &local_var_str.to_string())]);
	}
	if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
		local_var_req_builder =
			local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
	}

	let local_var_req = local_var_req_builder.build()?;
	let local_var_resp = local_var_client.execute(local_var_req).await?;

	let local_var_status = local_var_resp.status();
	let local_var_content = local_var_resp.text().await?;

	if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
		serde_json::from_str(&local_var_content).map_err(Error::from)
	} else {
		let local_var_entity: Option<ListAgentTaskArtifactsError> =
			serde_json::from_str(&local_var_content).ok();
		let local_var_error = ResponseContent {
			status: local_var_status,
			content: local_var_content,
			entity: local_var_entity,
		};
		Err(Error::ResponseError(local_var_error))
	}
}

pub async fn list_agent_task_steps(
	configuration: &configuration::Configuration,
	task_id: &str,
	current_page: Option<i32>,
	page_size: Option<i32>,
) -> Result<crate::models::TaskStepsListResponse, Error<ListAgentTaskStepsError>> {
	let local_var_configuration = configuration;

	let local_var_client = &local_var_configuration.client;

	let local_var_uri_str = format!(
		"{}/ap/v1/agent/tasks/{task_id}/steps",
		local_var_configuration.base_path,
		task_id = crate::apis::urlencode(task_id)
	);
	let mut local_var_req_builder =
		local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

	if let Some(ref local_var_str) = current_page {
		local_var_req_builder =
			local_var_req_builder.query(&[("current_page", &local_var_str.to_string())]);
	}
	if let Some(ref local_var_str) = page_size {
		local_var_req_builder =
			local_var_req_builder.query(&[("page_size", &local_var_str.to_string())]);
	}
	if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
		local_var_req_builder =
			local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
	}

	let local_var_req = local_var_req_builder.build()?;
	let local_var_resp = local_var_client.execute(local_var_req).await?;

	let local_var_status = local_var_resp.status();
	let local_var_content = local_var_resp.text().await?;

	if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
		serde_json::from_str(&local_var_content).map_err(Error::from)
	} else {
		let local_var_entity: Option<ListAgentTaskStepsError> =
			serde_json::from_str(&local_var_content).ok();
		let local_var_error = ResponseContent {
			status: local_var_status,
			content: local_var_content,
			entity: local_var_entity,
		};
		Err(Error::ResponseError(local_var_error))
	}
}

pub async fn list_agent_tasks(
	configuration: &configuration::Configuration,
	current_page: Option<i32>,
	page_size: Option<i32>,
) -> Result<crate::models::TaskListResponse, Error<ListAgentTasksError>> {
	let local_var_configuration = configuration;

	let local_var_client = &local_var_configuration.client;

	let local_var_uri_str = format!("{}/ap/v1/agent/tasks", local_var_configuration.base_path);
	let mut local_var_req_builder =
		local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

	if let Some(ref local_var_str) = current_page {
		local_var_req_builder =
			local_var_req_builder.query(&[("current_page", &local_var_str.to_string())]);
	}
	if let Some(ref local_var_str) = page_size {
		local_var_req_builder =
			local_var_req_builder.query(&[("page_size", &local_var_str.to_string())]);
	}
	if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
		local_var_req_builder =
			local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
	}

	let local_var_req = local_var_req_builder.build()?;
	let local_var_resp = local_var_client.execute(local_var_req).await?;

	let local_var_status = local_var_resp.status();
	let local_var_content = local_var_resp.text().await?;

	if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
		serde_json::from_str(&local_var_content).map_err(Error::from)
	} else {
		let local_var_entity: Option<ListAgentTasksError> =
			serde_json::from_str(&local_var_content).ok();
		let local_var_error = ResponseContent {
			status: local_var_status,
			content: local_var_content,
			entity: local_var_entity,
		};
		Err(Error::ResponseError(local_var_error))
	}
}

pub async fn upload_agent_task_artifacts(
	configuration: &configuration::Configuration,
	task_id: &str,
	_file: std::path::PathBuf,
	relative_path: Option<&str>,
) -> Result<crate::models::Artifact, Error<UploadAgentTaskArtifactsError>> {
	let local_var_configuration = configuration;

	let local_var_client = &local_var_configuration.client;

	let local_var_uri_str = format!(
		"{}/ap/v1/agent/tasks/{task_id}/artifacts",
		local_var_configuration.base_path,
		task_id = crate::apis::urlencode(task_id)
	);
	let mut local_var_req_builder =
		local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

	if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
		local_var_req_builder =
			local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
	}
	let mut local_var_form = reqwest::multipart::Form::new();
	// TODO: support file upload for 'file' parameter
	if let Some(local_var_param_value) = relative_path {
		local_var_form = local_var_form.text("relative_path", local_var_param_value.to_string());
	}
	local_var_req_builder = local_var_req_builder.multipart(local_var_form);

	let local_var_req = local_var_req_builder.build()?;
	let local_var_resp = local_var_client.execute(local_var_req).await?;

	let local_var_status = local_var_resp.status();
	let local_var_content = local_var_resp.text().await?;

	if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
		serde_json::from_str(&local_var_content).map_err(Error::from)
	} else {
		let local_var_entity: Option<UploadAgentTaskArtifactsError> =
			serde_json::from_str(&local_var_content).ok();
		let local_var_error = ResponseContent {
			status: local_var_status,
			content: local_var_content,
			entity: local_var_entity,
		};
		Err(Error::ResponseError(local_var_error))
	}
}
