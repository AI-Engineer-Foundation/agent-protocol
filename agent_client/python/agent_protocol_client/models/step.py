# coding: utf-8

"""
    Agent Communication Protocol

    Specification of the API protocol for communication with an agent.  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist


class Step(BaseModel):
    """
    Step
    """

    input: Optional[Any] = Field(
        None, description="Input parameters for the task step. Any value is allowed."
    )
    output: Optional[Any] = Field(
        None,
        description="Output that the task step has produced. Any value is allowed.",
    )
    artifacts: conlist(Any) = Field(
        ..., description="A list of artifacts that the step has produced."
    )
    is_last: Optional[StrictBool] = Field(
        False, description="Whether this is the last step in the task."
    )
    task_id: StrictStr = Field(
        ..., description="The ID of the task this step belongs to."
    )
    step_id: StrictStr = Field(..., description="The ID of the task step.")
    __properties = ["input", "output", "artifacts", "is_last", "task_id", "step_id"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Step:
        """Create an instance of Step from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # set to None if input (nullable) is None
        # and __fields_set__ contains the field
        if self.input is None and "input" in self.__fields_set__:
            _dict["input"] = None

        # set to None if output (nullable) is None
        # and __fields_set__ contains the field
        if self.output is None and "output" in self.__fields_set__:
            _dict["output"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Step:
        """Create an instance of Step from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Step.parse_obj(obj)

        _obj = Step.parse_obj(
            {
                "input": obj.get("input"),
                "output": obj.get("output"),
                "artifacts": obj.get("artifacts"),
                "is_last": obj.get("is_last")
                if obj.get("is_last") is not None
                else False,
                "task_id": obj.get("task_id"),
                "step_id": obj.get("step_id"),
            }
        )
        return _obj
