# coding: utf-8

"""
    Agent Protocol

    Specification of the API protocol for communication with an agent.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from agent_protocol_client.pydantic_v1 import validate_arguments, ValidationError
from typing import overload, Optional, Union, Awaitable

from typing_extensions import Annotated
from agent_protocol_client.pydantic_v1 import Field, StrictBytes, StrictStr, conint

from typing import Optional, Union

from agent_protocol_client.models.artifact import Artifact
from agent_protocol_client.models.step import Step
from agent_protocol_client.models.step_request_body import StepRequestBody
from agent_protocol_client.models.task import Task
from agent_protocol_client.models.task_artifacts_list_response import (
    TaskArtifactsListResponse,
)
from agent_protocol_client.models.task_list_response import TaskListResponse
from agent_protocol_client.models.task_request_body import TaskRequestBody
from agent_protocol_client.models.task_steps_list_response import TaskStepsListResponse

from agent_protocol_client.api_client import ApiClient
from agent_protocol_client.api_response import ApiResponse
from agent_protocol_client.exceptions import ApiTypeError, ApiValueError  # noqa: F401


class AgentApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    async def create_agent_task(
        self, task_request_body: Optional[TaskRequestBody] = None, **kwargs
    ) -> Task:  # noqa: E501
        """Creates a task for the agent.  # noqa: E501


        :param task_request_body:
        :type task_request_body: TaskRequestBody
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Task
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the create_agent_task_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.create_agent_task_with_http_info(
            task_request_body, **kwargs
        )  # noqa: E501

    @validate_arguments
    async def create_agent_task_with_http_info(
        self, task_request_body: Optional[TaskRequestBody] = None, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Creates a task for the agent.  # noqa: E501


        :param task_request_body:
        :type task_request_body: TaskRequestBody
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Task, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["task_request_body"]
        _all_params.extend(
            [
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_agent_task" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["task_request_body"] is not None:
            _body_params = _params["task_request_body"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type",
            self.api_client.select_header_content_type(["application/json"]),
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            "200": "Task",
            "422": "object",
        }

        return await self.api_client.call_api(
            "/ap/v1/agent/tasks",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    async def download_agent_task_artifact(
        self,
        task_id: Annotated[StrictStr, Field(..., description="ID of the task")],
        artifact_id: Annotated[StrictStr, Field(..., description="ID of the artifact")],
        **kwargs
    ) -> bytearray:  # noqa: E501
        """Download a specified artifact.  # noqa: E501


        :param task_id: ID of the task (required)
        :type task_id: str
        :param artifact_id: ID of the artifact (required)
        :type artifact_id: str
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: bytearray
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the download_agent_task_artifact_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.download_agent_task_artifact_with_http_info(
            task_id, artifact_id, **kwargs
        )  # noqa: E501

    @validate_arguments
    async def download_agent_task_artifact_with_http_info(
        self,
        task_id: Annotated[StrictStr, Field(..., description="ID of the task")],
        artifact_id: Annotated[StrictStr, Field(..., description="ID of the artifact")],
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Download a specified artifact.  # noqa: E501


        :param task_id: ID of the task (required)
        :type task_id: str
        :param artifact_id: ID of the artifact (required)
        :type artifact_id: str
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(bytearray, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["task_id", "artifact_id"]
        _all_params.extend(
            [
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_agent_task_artifact" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["task_id"] is not None:
            _path_params["task_id"] = _params["task_id"]

        if _params["artifact_id"] is not None:
            _path_params["artifact_id"] = _params["artifact_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/octet-stream", "application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            "200": "bytearray",
            "404": "GetAgentTask404Response",
        }

        return await self.api_client.call_api(
            "/ap/v1/agent/tasks/{task_id}/artifacts/{artifact_id}",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    async def execute_agent_task_step(
        self,
        task_id: Annotated[StrictStr, Field(..., description="ID of the task")],
        step_request_body: Optional[StepRequestBody] = None,
        **kwargs
    ) -> Step:  # noqa: E501
        """Execute a step in the specified agent task.  # noqa: E501


        :param task_id: ID of the task (required)
        :type task_id: str
        :param step_request_body:
        :type step_request_body: StepRequestBody
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Step
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the execute_agent_task_step_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.execute_agent_task_step_with_http_info(
            task_id, step_request_body, **kwargs
        )  # noqa: E501

    @validate_arguments
    async def execute_agent_task_step_with_http_info(
        self,
        task_id: Annotated[StrictStr, Field(..., description="ID of the task")],
        step_request_body: Optional[StepRequestBody] = None,
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Execute a step in the specified agent task.  # noqa: E501


        :param task_id: ID of the task (required)
        :type task_id: str
        :param step_request_body:
        :type step_request_body: StepRequestBody
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Step, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["task_id", "step_request_body"]
        _all_params.extend(
            [
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method execute_agent_task_step" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["task_id"] is not None:
            _path_params["task_id"] = _params["task_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["step_request_body"] is not None:
            _body_params = _params["step_request_body"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type",
            self.api_client.select_header_content_type(["application/json"]),
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            "200": "Step",
            "404": "GetAgentTask404Response",
            "422": "object",
        }

        return await self.api_client.call_api(
            "/ap/v1/agent/tasks/{task_id}/steps",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    async def get_agent_task(
        self,
        task_id: Annotated[StrictStr, Field(..., description="ID of the task")],
        **kwargs
    ) -> Task:  # noqa: E501
        """Get details about a specified agent task.  # noqa: E501


        :param task_id: ID of the task (required)
        :type task_id: str
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Task
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the get_agent_task_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.get_agent_task_with_http_info(task_id, **kwargs)  # noqa: E501

    @validate_arguments
    async def get_agent_task_with_http_info(
        self,
        task_id: Annotated[StrictStr, Field(..., description="ID of the task")],
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Get details about a specified agent task.  # noqa: E501


        :param task_id: ID of the task (required)
        :type task_id: str
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Task, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["task_id"]
        _all_params.extend(
            [
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_agent_task" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["task_id"] is not None:
            _path_params["task_id"] = _params["task_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            "200": "Task",
            "404": "GetAgentTask404Response",
        }

        return await self.api_client.call_api(
            "/ap/v1/agent/tasks/{task_id}",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    async def get_agent_task_step(
        self,
        task_id: Annotated[StrictStr, Field(..., description="ID of the task")],
        step_id: Annotated[StrictStr, Field(..., description="ID of the step")],
        **kwargs
    ) -> Step:  # noqa: E501
        """Get details about a specified task step.  # noqa: E501


        :param task_id: ID of the task (required)
        :type task_id: str
        :param step_id: ID of the step (required)
        :type step_id: str
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Step
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the get_agent_task_step_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.get_agent_task_step_with_http_info(
            task_id, step_id, **kwargs
        )  # noqa: E501

    @validate_arguments
    async def get_agent_task_step_with_http_info(
        self,
        task_id: Annotated[StrictStr, Field(..., description="ID of the task")],
        step_id: Annotated[StrictStr, Field(..., description="ID of the step")],
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Get details about a specified task step.  # noqa: E501


        :param task_id: ID of the task (required)
        :type task_id: str
        :param step_id: ID of the step (required)
        :type step_id: str
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Step, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["task_id", "step_id"]
        _all_params.extend(
            [
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_agent_task_step" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["task_id"] is not None:
            _path_params["task_id"] = _params["task_id"]

        if _params["step_id"] is not None:
            _path_params["step_id"] = _params["step_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            "200": "Step",
            "404": "GetAgentTask404Response",
        }

        return await self.api_client.call_api(
            "/ap/v1/agent/tasks/{task_id}/steps/{step_id}",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    async def list_agent_task_artifacts(
        self,
        task_id: Annotated[StrictStr, Field(..., description="ID of the task")],
        current_page: Annotated[
            Optional[conint(strict=True, ge=1)], Field(description="Page number")
        ] = None,
        page_size: Annotated[
            Optional[conint(strict=True, ge=1)],
            Field(description="Number of items per page"),
        ] = None,
        **kwargs
    ) -> TaskArtifactsListResponse:  # noqa: E501
        """List all artifacts that have been created for the given task.  # noqa: E501


        :param task_id: ID of the task (required)
        :type task_id: str
        :param current_page: Page number
        :type current_page: int
        :param page_size: Number of items per page
        :type page_size: int
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: TaskArtifactsListResponse
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the list_agent_task_artifacts_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.list_agent_task_artifacts_with_http_info(
            task_id, current_page, page_size, **kwargs
        )  # noqa: E501

    @validate_arguments
    async def list_agent_task_artifacts_with_http_info(
        self,
        task_id: Annotated[StrictStr, Field(..., description="ID of the task")],
        current_page: Annotated[
            Optional[conint(strict=True, ge=1)], Field(description="Page number")
        ] = None,
        page_size: Annotated[
            Optional[conint(strict=True, ge=1)],
            Field(description="Number of items per page"),
        ] = None,
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """List all artifacts that have been created for the given task.  # noqa: E501


        :param task_id: ID of the task (required)
        :type task_id: str
        :param current_page: Page number
        :type current_page: int
        :param page_size: Number of items per page
        :type page_size: int
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(TaskArtifactsListResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["task_id", "current_page", "page_size"]
        _all_params.extend(
            [
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_agent_task_artifacts" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["task_id"] is not None:
            _path_params["task_id"] = _params["task_id"]

        # process the query parameters
        _query_params = []
        if _params.get("current_page") is not None:  # noqa: E501
            _query_params.append(("current_page", _params["current_page"]))

        if _params.get("page_size") is not None:  # noqa: E501
            _query_params.append(("page_size", _params["page_size"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            "200": "TaskArtifactsListResponse",
            "404": "GetAgentTask404Response",
        }

        return await self.api_client.call_api(
            "/ap/v1/agent/tasks/{task_id}/artifacts",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    async def list_agent_task_steps(
        self,
        task_id: Annotated[StrictStr, Field(..., description="ID of the task.")],
        current_page: Annotated[
            Optional[conint(strict=True, ge=1)], Field(description="Page number")
        ] = None,
        page_size: Annotated[
            Optional[conint(strict=True, ge=1)],
            Field(description="Number of items per page"),
        ] = None,
        **kwargs
    ) -> TaskStepsListResponse:  # noqa: E501
        """List all steps for the specified task.  # noqa: E501


        :param task_id: ID of the task. (required)
        :type task_id: str
        :param current_page: Page number
        :type current_page: int
        :param page_size: Number of items per page
        :type page_size: int
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: TaskStepsListResponse
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the list_agent_task_steps_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.list_agent_task_steps_with_http_info(
            task_id, current_page, page_size, **kwargs
        )  # noqa: E501

    @validate_arguments
    async def list_agent_task_steps_with_http_info(
        self,
        task_id: Annotated[StrictStr, Field(..., description="ID of the task.")],
        current_page: Annotated[
            Optional[conint(strict=True, ge=1)], Field(description="Page number")
        ] = None,
        page_size: Annotated[
            Optional[conint(strict=True, ge=1)],
            Field(description="Number of items per page"),
        ] = None,
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """List all steps for the specified task.  # noqa: E501


        :param task_id: ID of the task. (required)
        :type task_id: str
        :param current_page: Page number
        :type current_page: int
        :param page_size: Number of items per page
        :type page_size: int
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(TaskStepsListResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["task_id", "current_page", "page_size"]
        _all_params.extend(
            [
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_agent_task_steps" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["task_id"] is not None:
            _path_params["task_id"] = _params["task_id"]

        # process the query parameters
        _query_params = []
        if _params.get("current_page") is not None:  # noqa: E501
            _query_params.append(("current_page", _params["current_page"]))

        if _params.get("page_size") is not None:  # noqa: E501
            _query_params.append(("page_size", _params["page_size"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            "200": "TaskStepsListResponse",
            "404": "GetAgentTask404Response",
        }

        return await self.api_client.call_api(
            "/ap/v1/agent/tasks/{task_id}/steps",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    async def list_agent_tasks(
        self,
        current_page: Annotated[
            Optional[conint(strict=True, ge=1)], Field(description="Page number")
        ] = None,
        page_size: Annotated[
            Optional[conint(strict=True, ge=1)],
            Field(description="Number of items per page"),
        ] = None,
        **kwargs
    ) -> TaskListResponse:  # noqa: E501
        """List all tasks that have been created for the agent.  # noqa: E501


        :param current_page: Page number
        :type current_page: int
        :param page_size: Number of items per page
        :type page_size: int
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: TaskListResponse
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the list_agent_tasks_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.list_agent_tasks_with_http_info(
            current_page, page_size, **kwargs
        )  # noqa: E501

    @validate_arguments
    async def list_agent_tasks_with_http_info(
        self,
        current_page: Annotated[
            Optional[conint(strict=True, ge=1)], Field(description="Page number")
        ] = None,
        page_size: Annotated[
            Optional[conint(strict=True, ge=1)],
            Field(description="Number of items per page"),
        ] = None,
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """List all tasks that have been created for the agent.  # noqa: E501


        :param current_page: Page number
        :type current_page: int
        :param page_size: Number of items per page
        :type page_size: int
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(TaskListResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["current_page", "page_size"]
        _all_params.extend(
            [
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_agent_tasks" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get("current_page") is not None:  # noqa: E501
            _query_params.append(("current_page", _params["current_page"]))

        if _params.get("page_size") is not None:  # noqa: E501
            _query_params.append(("page_size", _params["page_size"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            "200": "TaskListResponse",
        }

        return await self.api_client.call_api(
            "/ap/v1/agent/tasks",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    async def upload_agent_task_artifacts(
        self,
        task_id: Annotated[StrictStr, Field(..., description="ID of the task")],
        file: Annotated[
            Union[StrictBytes, StrictStr], Field(..., description="File to upload.")
        ],
        relative_path: Annotated[
            Optional[StrictStr],
            Field(
                description="Relative path of the artifact in the agent's workspace."
            ),
        ] = None,
        **kwargs
    ) -> Artifact:  # noqa: E501
        """Upload an artifact for the specified task.  # noqa: E501


        :param task_id: ID of the task (required)
        :type task_id: str
        :param file: File to upload. (required)
        :type file: bytearray
        :param relative_path: Relative path of the artifact in the agent's workspace.
        :type relative_path: str
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Artifact
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the upload_agent_task_artifacts_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.upload_agent_task_artifacts_with_http_info(
            task_id, file, relative_path, **kwargs
        )  # noqa: E501

    @validate_arguments
    async def upload_agent_task_artifacts_with_http_info(
        self,
        task_id: Annotated[StrictStr, Field(..., description="ID of the task")],
        file: Annotated[
            Union[StrictBytes, StrictStr], Field(..., description="File to upload.")
        ],
        relative_path: Annotated[
            Optional[StrictStr],
            Field(
                description="Relative path of the artifact in the agent's workspace."
            ),
        ] = None,
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Upload an artifact for the specified task.  # noqa: E501


        :param task_id: ID of the task (required)
        :type task_id: str
        :param file: File to upload. (required)
        :type file: bytearray
        :param relative_path: Relative path of the artifact in the agent's workspace.
        :type relative_path: str
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Artifact, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["task_id", "file", "relative_path"]
        _all_params.extend(
            [
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_agent_task_artifacts" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["task_id"] is not None:
            _path_params["task_id"] = _params["task_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        if _params["file"] is not None:
            _files["file"] = _params["file"]

        if _params["relative_path"] is not None:
            _form_params.append(("relative_path", _params["relative_path"]))

        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type",
            self.api_client.select_header_content_type(["multipart/form-data"]),
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            "200": "Artifact",
            "404": "GetAgentTask404Response",
        }

        return await self.api_client.call_api(
            "/ap/v1/agent/tasks/{task_id}/artifacts",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )
